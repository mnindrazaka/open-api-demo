/* tslint:disable */
/* eslint-disable */
/**
 * Sample Product API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    price: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    discountPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    rating?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    stock: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    brand: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    thumbnail?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    images?: Array<string>;
}

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "stock" in value;
    isInstance = isInstance && "brand" in value;
    isInstance = isInstance && "category" in value;

    return isInstance;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'price': json['price'],
        'discountPercentage': !exists(json, 'discountPercentage') ? undefined : json['discountPercentage'],
        'rating': !exists(json, 'rating') ? undefined : json['rating'],
        'stock': json['stock'],
        'brand': json['brand'],
        'category': json['category'],
        'thumbnail': !exists(json, 'thumbnail') ? undefined : json['thumbnail'],
        'images': !exists(json, 'images') ? undefined : json['images'],
    };
}

export function ProductToJSON(value?: Product | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'description': value.description,
        'price': value.price,
        'discountPercentage': value.discountPercentage,
        'rating': value.rating,
        'stock': value.stock,
        'brand': value.brand,
        'category': value.category,
        'thumbnail': value.thumbnail,
        'images': value.images,
    };
}

